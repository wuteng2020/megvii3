major_version: "3"
minor_version: "1"
default_target_cpu: "k8"

default_toolchain {
    cpu: "k8"
    toolchain_identifier: "v3-gpu"
}

default_toolchain {
    cpu: "tk1"
    toolchain_identifier: "v3-tk1"
}

toolchain {
    abi_version: "megvii"
    abi_libc_version: "megvii"
    builtin_sysroot: ""
    compiler: "gcc"
    host_system_name: "megvii"
    needsPic: true
    supports_gold_linker: false
    supports_incremental_linker: true
    supports_fission: false
    supports_interface_shared_objects: false
    supports_normalizing_ar: true
    supports_start_end_lib: false
    supports_thin_archives: false
    target_libc: "v2.12"
    target_cpu: "k8"
    target_system_name: "megvii"
    toolchain_identifier: "v3"

    tool_path { name: "ar" path: "v3/v3-ar" }
    tool_path { name: "compat-ld" path: "v3/v3-ld" }
    tool_path { name: "cpp" path: "v3/v3-cpp" }
    tool_path { name: "dwp" path: "v3/v3-dwp" }
    tool_path { name: "gcc" path: "v3/v3-gcc" }
    cxx_flag: "-std=c++11"
    compiler_flag: "-fopenmp"
    linker_flag: "-lstdc++"
    linker_flag: "-lgcc"
    linker_flag: "-lgcc_eh"
    linker_flag: "-lgomp"
    linker_flag: "-lm"
    linker_flag: "-Bv3/usr/bin/x86_64-megvii-linux-gnu-"
    linker_flag: "-Wl,--as-needed"

    cxx_builtin_include_directory: "v3/usr/include"
    tool_path { name: "gcov" path: "v3/v3-gcov" }

    # C(++) compiles invoke the compiler (as that is the one knowing where
    # to find libraries), but we provide LD so other rules can invoke the linker.
    tool_path { name: "ld" path: "v3/v3-ld" }

    tool_path { name: "nm" path: "v3/v3-nm" }
    tool_path { name: "objcopy" path: "v3/v3-objcopy" }
    objcopy_embed_flag: "-I"
    objcopy_embed_flag: "binary"
    tool_path { name: "objdump" path: "v3/v3-objdump" }
    tool_path { name: "strip" path: "v3/v3-strip" }

    # Anticipated future default.
    unfiltered_cxx_flag: "-no-canonical-prefixes"
    unfiltered_cxx_flag: "-fno-canonical-system-headers"

    # Make C++ compilation deterministic. Use linkstamping instead of these
    # compiler symbols.
    unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
    unfiltered_cxx_flag: "-D__DATE__=\"megvii\""
    unfiltered_cxx_flag: "-D__TIMESTAMP__=\"megvii\""
    unfiltered_cxx_flag: "-D__TIME__=\"megvii\""

    # Security hardening on by default.
    # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
    # We need to undef it before redefining it as some distributions now have
    # it enabled by default.
    compiler_flag: "-U_FORTIFY_SOURCE"
    compiler_flag: "-D_FORTIFY_SOURCE=1"
    compiler_flag: "-fstack-protector"
    linker_flag: "-Wl,-z,relro,-z,now"

    compiler_flag: "-fdiagnostics-color=always"

    # All warnings are enabled. Maybe enable -Werror as well?
    compiler_flag: "-Wall"
    # Enable a few more warnings that aren't part of -Wall.
    compiler_flag: "-Wunused-but-set-parameter"
    # But disable some that are problematic.
    compiler_flag: "-Wno-free-nonheap-object" # has false positives

    # Keep stack frames for debugging, even in opt mode.
    compiler_flag: "-fno-omit-frame-pointer"

    # Anticipated future default.
    linker_flag: "-no-canonical-prefixes"
    # Have gcc return the exit code from ld.
    linker_flag: "-pass-exit-codes"
    # Stamp the binary with a unique identifier.
    linker_flag: "-Wl,--build-id=md5"
    linker_flag: "-Wl,--hash-style=gnu"

    # Use the gold linker, to enable some Gold linker only options.
    # FIXME(yangyi): does not work right now
    # linker_flag: "-fuse-ld=gold"
    # linker_flag: "-Wl,--warn-execstack"
    # linker_flag: "-Wl,--detect-odr-violations"

    # FIXME(yangyi): use sysroot for now
    compiler_flag: "--sysroot=external/toolchain_v3_archive/"
    linker_flag: "--sysroot=external/toolchain_v3_archive/"

    compilation_mode_flags {
        mode: DBG
        # Enable debug symbols.
        compiler_flag: "-g"
    }
    compilation_mode_flags {
        mode: OPT

        # No debug symbols.
        # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
        # even generally? However, that can't happen here, as it requires special
        # handling in Bazel.
        compiler_flag: "-g0"

        # Conservative choice for -O
        # -O3 can increase binary size and even slow down the resulting binaries.
        # Profile first and / or use FDO if you need better performance than this.
        compiler_flag: "-O2"

        # Disable assertions
        compiler_flag: "-DNDEBUG"

        # Removal of unused code and data at link time (can this increase binary size in some cases?).
        compiler_flag: "-ffunction-sections"
        compiler_flag: "-fdata-sections"
        linker_flag: "-Wl,--gc-sections"
    }
    linking_mode_flags { mode: DYNAMIC }
}

toolchain {
    abi_version: "megvii"
    abi_libc_version: "megvii"
    builtin_sysroot: ""
    compiler: "gcc_cuda"
    host_system_name: "megvii"
    needsPic: true
    supports_gold_linker: false
    supports_incremental_linker: true
    supports_fission: false
    supports_interface_shared_objects: false
    supports_normalizing_ar: true
    supports_start_end_lib: false
    supports_thin_archives: false
    target_libc: "v2.12"
    target_cpu: "k8"
    target_system_name: "megvii"
    toolchain_identifier: "v3-gpu"

    tool_path { name: "ar" path: "v3/v3-ar" }
    tool_path { name: "compat-ld" path: "v3/v3-ld" }
    tool_path { name: "cpp" path: "v3/v3-cpp" }
    tool_path { name: "dwp" path: "v3/v3-dwp" }
    tool_path { name: "gcc" path: "v3-gpu/crosstool_wrapper_driver_is_not_gcc" }
    cxx_flag: "-std=c++11"
    compiler_flag: "-fopenmp"
    compiler_flag: "-Iexternal/cuda_7_5_archive/include/"
    linker_flag: "-Lexternal/cuda_7_5_archive/lib64/"
    linker_flag: "-lcublas_static"
    linker_flag: "-lcudart_static"
    linker_flag: "-lculibos"
    linker_flag: "-lstdc++"
    linker_flag: "-lgcc"
    linker_flag: "-lgcc_eh"
    linker_flag: "-lgomp"
    linker_flag: "-lm"
    linker_flag: "-Bv3/usr/bin/x86_64-megvii-linux-gnu-"
    linker_flag: "-Wl,--as-needed"
    linker_flag: "-lrt"
    linker_flag: "-ldl"

    cxx_builtin_include_directory: "v3/usr/include"
    tool_path { name: "gcov" path: "v3/v3-gcov" }

    # C(++) compiles invoke the compiler (as that is the one knowing where
    # to find libraries), but we provide LD so other rules can invoke the linker.
    tool_path { name: "ld" path: "v3/v3-ld" }

    tool_path { name: "nm" path: "v3/v3-nm" }
    tool_path { name: "objcopy" path: "v3/v3-objcopy" }
    objcopy_embed_flag: "-I"
    objcopy_embed_flag: "binary"
    tool_path { name: "objdump" path: "v3/v3-objdump" }
    tool_path { name: "strip" path: "v3/v3-strip" }

    # Anticipated future default.
    unfiltered_cxx_flag: "-no-canonical-prefixes"
    unfiltered_cxx_flag: "-fno-canonical-system-headers"

    # Make C++ compilation deterministic. Use linkstamping instead of these
    # compiler symbols.
    unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
    unfiltered_cxx_flag: "-D__DATE__=\"megvii\""
    unfiltered_cxx_flag: "-D__TIMESTAMP__=\"megvii\""
    unfiltered_cxx_flag: "-D__TIME__=\"megvii\""

    # Security hardening on by default.
    # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
    # We need to undef it before redefining it as some distributions now have
    # it enabled by default.
    compiler_flag: "-U_FORTIFY_SOURCE"
    compiler_flag: "-D_FORTIFY_SOURCE=1"
    compiler_flag: "-fstack-protector"
    linker_flag: "-Wl,-z,relro,-z,now"

    compiler_flag: "-fdiagnostics-color=always"

    # All warnings are enabled. Maybe enable -Werror as well?
    compiler_flag: "-Wall"
    # Enable a few more warnings that aren't part of -Wall.
    compiler_flag: "-Wunused-but-set-parameter"
    # But disable some that are problematic.
    compiler_flag: "-Wno-free-nonheap-object" # has false positives

    # Keep stack frames for debugging, even in opt mode.
    compiler_flag: "-fno-omit-frame-pointer"

    # Anticipated future default.
    linker_flag: "-no-canonical-prefixes"
    # Have gcc return the exit code from ld.
    linker_flag: "-pass-exit-codes"
    # Stamp the binary with a unique identifier.
    linker_flag: "-Wl,--build-id=md5"
    linker_flag: "-Wl,--hash-style=gnu"

    # Use the gold linker, to enable some Gold linker only options.
    # FIXME(yangyi): does not work right now
    # linker_flag: "-fuse-ld=gold"
    # linker_flag: "-Wl,--warn-execstack"
    # linker_flag: "-Wl,--detect-odr-violations"

    # FIXME(yangyi): use sysroot for now
    compiler_flag: "--sysroot=external/toolchain_v3_archive/"
    linker_flag: "--sysroot=external/toolchain_v3_archive/"

    compilation_mode_flags {
        mode: DBG
        # Enable debug symbols.
        compiler_flag: "-g"
    }
    compilation_mode_flags {
        mode: OPT

        # No debug symbols.
        # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
        # even generally? However, that can't happen here, as it requires special
        # handling in Bazel.
        compiler_flag: "-g0"

        # Conservative choice for -O
        # -O3 can increase binary size and even slow down the resulting binaries.
        # Profile first and / or use FDO if you need better performance than this.
        compiler_flag: "-O2"

        # Disable assertions
        compiler_flag: "-DNDEBUG"

        # Removal of unused code and data at link time (can this increase binary size in some cases?).
        compiler_flag: "-ffunction-sections"
        compiler_flag: "-fdata-sections"
        linker_flag: "-Wl,--gc-sections"
    }
    linking_mode_flags { mode: DYNAMIC }
}

toolchain {
    abi_version: "megvii"
    abi_libc_version: "megvii"
    builtin_sysroot: ""
    compiler: "gcc"
    host_system_name: "megvii"
    needsPic: true
    supports_gold_linker: false
    supports_incremental_linker: true
    supports_fission: false
    supports_interface_shared_objects: false
    supports_normalizing_ar: true
    supports_start_end_lib: false
    supports_thin_archives: false
    target_libc: "v2.12"
    target_cpu: "tk1"
    target_system_name: "megvii"
    toolchain_identifier: "v3-tk1"

    tool_path { name: "ar" path: "v3-tk1/v3-tk1-ar" }
    tool_path { name: "compat-ld" path: "v3-tk1/v3-tk1-ld" }
    tool_path { name: "cpp" path: "v3-tk1/v3-tk1-cpp" }
    tool_path { name: "dwp" path: "v3-tk1/v3-tk1-dwp" }
    tool_path { name: "gcc" path: "v3-tk1/v3-tk1-gcc" }
    cxx_flag: "-std=c++11"
    compiler_flag: "-fopenmp"
    linker_flag: "-lstdc++"
    linker_flag: "-lgcc"
    linker_flag: "-lgcc_eh"
    linker_flag: "-lgomp"
    linker_flag: "-lm"
    linker_flag: "-Bv3-tk1/usr/bin/x86_64-megvii-linux-gnu-"
    linker_flag: "-Wl,--as-needed"

    cxx_builtin_include_directory: "v3-tk1/usr/include"
    tool_path { name: "gcov" path: "v3-tk1/v3-tk1-gcov" }

    # C(++) compiles invoke the compiler (as that is the one knowing where
    # to find libraries), but we provide LD so other rules can invoke the linker.
    tool_path { name: "ld" path: "v3-tk1/v3-tk1-ld" }

    tool_path { name: "nm" path: "v3-tk1/v3-tk1-nm" }
    tool_path { name: "objcopy" path: "v3-tk1/v3-tk1-objcopy" }
    objcopy_embed_flag: "-I"
    objcopy_embed_flag: "binary"
    tool_path { name: "objdump" path: "v3-tk1/v3-tk1-objdump" }
    tool_path { name: "strip" path: "v3-tk1/v3-tk1-strip" }

    # Anticipated future default.
    unfiltered_cxx_flag: "-no-canonical-prefixes"
    unfiltered_cxx_flag: "-fno-canonical-system-headers"

    # Make C++ compilation deterministic. Use linkstamping instead of these
    # compiler symbols.
    unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
    unfiltered_cxx_flag: "-D__DATE__=\"megvii\""
    unfiltered_cxx_flag: "-D__TIMESTAMP__=\"megvii\""
    unfiltered_cxx_flag: "-D__TIME__=\"megvii\""

    # Security hardening on by default.
    # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
    # We need to undef it before redefining it as some distributions now have
    # it enabled by default.
    compiler_flag: "-U_FORTIFY_SOURCE"
    compiler_flag: "-D_FORTIFY_SOURCE=1"
    compiler_flag: "-fstack-protector"
    linker_flag: "-Wl,-z,relro,-z,now"

    # TODO(yangyi): gcc 4.8 does not support this? Maybe need to patch it.
    # compiler_flag: "-fdiagnostics-color=always"

    # All warnings are enabled. Maybe enable -Werror as well?
    compiler_flag: "-Wall"
    # Enable a few more warnings that aren't part of -Wall.
    compiler_flag: "-Wunused-but-set-parameter"
    # But disable some that are problematic.
    compiler_flag: "-Wno-free-nonheap-object" # has false positives

    # Keep stack frames for debugging, even in opt mode.
    compiler_flag: "-fno-omit-frame-pointer"

    # Anticipated future default.
    linker_flag: "-no-canonical-prefixes"
    # Have gcc return the exit code from ld.
    linker_flag: "-pass-exit-codes"
    # Stamp the binary with a unique identifier.
    linker_flag: "-Wl,--build-id=md5"
    linker_flag: "-Wl,--hash-style=gnu"

    # Use the gold linker, to enable some Gold linker only options.
    # FIXME(yangyi): does not work right now
    # linker_flag: "-fuse-ld=gold"
    # linker_flag: "-Wl,--warn-execstack"
    # linker_flag: "-Wl,--detect-odr-violations"

    # FIXME(yangyi): use sysroot for now
    compiler_flag: "--sysroot=external/toolchain_v3_tk1_archive/"
    linker_flag: "--sysroot=external/toolchain_v3_tk1_archive/"

    compilation_mode_flags {
        mode: DBG
        # Enable debug symbols.
        compiler_flag: "-g"
    }
    compilation_mode_flags {
        mode: OPT

        # No debug symbols.
        # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
        # even generally? However, that can't happen here, as it requires special
        # handling in Bazel.
        compiler_flag: "-g0"

        # Conservative choice for -O
        # -O3 can increase binary size and even slow down the resulting binaries.
        # Profile first and / or use FDO if you need better performance than this.
        compiler_flag: "-O2"

        # Disable assertions
        compiler_flag: "-DNDEBUG"

        # Removal of unused code and data at link time (can this increase binary size in some cases?).
        compiler_flag: "-ffunction-sections"
        compiler_flag: "-fdata-sections"
        linker_flag: "-Wl,--gc-sections"
    }
    linking_mode_flags { mode: DYNAMIC }
}
